-> Here's a systematic strategy we'll apply for solving problems:

1. State the problem clearly. Identify the input & output formats.
2. Come up with some example inputs & outputs. Try to cover all edge cases.
3. Come up with a correct solution for the problem. State it in plain English.
4. Implement the solution and test it using example inputs. Fix bugs, if any.
5. Analyze the algorithm's complexity and identify inefficiencies, if any.
6. Apply the right technique to overcome the inefficiency. Repeat steps 3 to 6.
------------------------------------------------------------------------


-> Complexity and Big O Notation

    Complexity of an algorithm is a measure of the amount of time and/or space
required by an algorithm for an input of a given size e.g. N. Unless otherwise
stated, the term complexity always refers to the worst-case complexity (i.e. the
highest possible time/space taken by the program/algorithm to process an input).

-> In the case of linear search:

The time complexity of the algorithm is cN for some fixed constant c that depends
on the number of operations we perform in each iteration and the time taken to
execute a statement. Time complexity is sometimes also called the running time
of the algorithm.

The space complexity is some constant c' (independent of N), since we just need a
single variable position to iterate through the array, and it occupies a constant
space in the computer's memory (RAM).

Big O Notation: Worst-case complexity is often expressed using the Big O notation.
In the Big O, we drop fixed constants and lower powers of variables to capture
the trend of relationship between the size of the input and the complexity of the
algorithm i.e. if the complexity of the algorithm is cN^3 + dN^2 + eN + f, in the
Big O notation it is expressed as O(N^3).

Thus, the time complexity of linear search is O(N) and its space complexity is
O(1).